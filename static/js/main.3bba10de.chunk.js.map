{"version":3,"sources":["components/Introduksjon.js","components/Problemer.js","components/Oversikt.js","components/Funksjonalitet.js","components/Tidslinje.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Innhold","Ingress","Introduksjon","Problemer","className","Oversikt","Funksjonalitet","Tidslinje","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qtBAIA,IAAMA,EAAUC,IAAOC,IAAV,KAUPC,EAAUF,IAAOC,IAAV,KAIPE,EAAUH,IAAOC,IAAV,KA4BEG,EAxBM,WACjB,OACI,kBAACL,EAAD,KACI,kBAACG,EAAD,KACI,kBAAC,aAAD,kBACc,6BADd,8CAGA,6BACA,kBAACC,EAAD,KACI,kBAAC,cAAD,wYAMA,kBAAC,cAAD,KACI,uDCbTE,G,MAtBG,WACd,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,WACX,kBAAC,aAAD,0CAGA,6BACA,kBAAC,cAAD,gfACqc,2BAAG,+DAExc,yBAAKA,UAAU,WACX,kBAAC,cAAD,8WCILC,EAhBE,WACb,OACI,yBAAKD,UAAU,kBACX,yBAAKA,UAAU,WACX,kBAAC,aAAD,eAGA,6BACA,kBAAC,cAAD,iBCQDE,EAhBQ,WACnB,OACI,yBAAKF,UAAU,kBACX,yBAAKA,UAAU,WACX,kBAAC,aAAD,eAGA,6BACA,kBAAC,cAAD,iBCQDG,EAhBG,WACd,OACI,yBAAKH,UAAU,kBACX,yBAAKA,UAAU,WACX,kBAAC,aAAD,eAGA,6BACA,kBAAC,cAAD,iBCSDI,MAZf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3bba10de.chunk.js","sourcesContent":["import React from 'react';\nimport styled from \"styled-components\";\nimport { Normaltekst, Sidetittel } from \"nav-frontend-typografi\";\n\nconst Wrapper = styled.div`\n  background-color: #C6C2BF;\n  position: relative;\n  color: black;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n`;\n\nconst Innhold = styled.div`\n  margin: 8rem;\n`;\n\nconst Ingress = styled.div`\n    max-width: 800px;\n`;\n\nconst Introduksjon = () => {\n    return (\n        <Wrapper>\n            <Innhold>\n                <Sidetittel>\n                    Ditt NAV: <br/>Helhet i innloggede tjenester på nav.no\n                </Sidetittel>\n                <br/>\n                <Ingress>\n                    <Normaltekst>\n                        \"Ditt NAV skal binde sammen alle de gode tjenestene som andre team lager for brukerne våre.\n                        Brukerne har ikke noe forhold til hvordan NAV er organisert eller hvordan tjenestene er inndelt\n                        - de vil bare ha hjelp og støtte i sin unike situasjon. På Ditt NAV skal brukerne få et\n                        overblikk over sitt forhold til NAV, og bli trygge på at NAV kan hjelpe dem videre i livet.\"\n                    </Normaltekst>\n                    <Normaltekst>\n                        <i>- Team Personbruker</i>\n                    </Normaltekst>\n                </Ingress>\n            </Innhold>\n        </Wrapper>\n    )\n};\n\nexport default Introduksjon;\n","import React from 'react';\nimport { Normaltekst, Sidetittel } from \"nav-frontend-typografi\";\n\nconst Problemer = () => {\n    return (\n        <div className=\"header section\">\n            <div className=\"innhold\">\n                <Sidetittel>\n                    Hvilke problemer skal vi løse?\n                </Sidetittel>\n                <br/>\n                <Normaltekst>\n                    Brukerne sliter med å finne frem i de innloggede løsningene på nav.no. Informasjonen er spredt og brukerne leter etter alt på alle steder. De føler utrygghet -\"Det sorte hullet\" blir brukt som betegnelse på opplevelsen brukerne har av å sende inn en søknad. Har Nav mottat søknaden min? Har jeg gjort alt riktig? Mangler det noe? Når skal nav begynne å se på saken min? Hvor lenge skal den være \"under behendling\" og hva er det neste som skal skje? <b><i>Kommer alt til å ordne seg?</i></b>\n                </Normaltekst>\n                <div className=\"innhold\">\n                    <Normaltekst>\n                        Dittnav blir en flaskehals slik det har vært satt opp, med ekstremt mange koblinger og avhengigheter ut til andre systemer og løsninger. Hver gang noe nytt skal \"kobles på\" Ditt NAV kreves det utvikling fra Team Personbruker, og det kan ta tid før verdifull informasjon til brukerne som blir generert av andre team når frem til Ditt NAV.\n                    </Normaltekst>\n                </div>\n            </div>\n\n        </div>\n    )\n};\n\nexport default Problemer;\n","import React from 'react';\nimport { Normaltekst, Sidetittel } from \"nav-frontend-typografi\";\n\nconst Oversikt = () => {\n    return (\n        <div className=\"header section\">\n            <div className=\"innhold\">\n                <Sidetittel>\n                    Tittel\n                </Sidetittel>\n                <br/>\n                <Normaltekst>\n                    Tekst\n                </Normaltekst>\n            </div>\n        </div>\n    )\n};\n\nexport default Oversikt;\n","import React from 'react';\nimport { Normaltekst, Sidetittel } from \"nav-frontend-typografi\";\n\nconst Funksjonalitet = () => {\n    return (\n        <div className=\"header section\">\n            <div className=\"innhold\">\n                <Sidetittel>\n                    Tittel\n                </Sidetittel>\n                <br/>\n                <Normaltekst>\n                    Tekst\n                </Normaltekst>\n            </div>\n        </div>\n    )\n};\n\nexport default Funksjonalitet;\n","import React from 'react';\nimport { Normaltekst, Sidetittel } from \"nav-frontend-typografi\";\n\nconst Tidslinje = () => {\n    return (\n        <div className=\"header section\">\n            <div className=\"innhold\">\n                <Sidetittel>\n                    Tittel\n                </Sidetittel>\n                <br/>\n                <Normaltekst>\n                    Tekst\n                </Normaltekst>\n            </div>\n        </div>\n    )\n};\n\nexport default Tidslinje;\n","import React from 'react';\nimport Introduksjon from './components/Introduksjon';\nimport './App.scss';\nimport Problemer from \"./components/Problemer\";\nimport Oversikt from \"./components/Oversikt\";\nimport Funksjonalitet from \"./components/Funksjonalitet\";\nimport Tidslinje from \"./components/Tidslinje\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Introduksjon />\n      <Problemer />\n      <Oversikt />\n      <Funksjonalitet />\n      <Tidslinje />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}