{"version":3,"sources":["assets/Diagram.png","components/styled/Layout.js","components/styled/Innhold.js","components/styled/Ingress.js","components/Introduksjon.js","components/Problemer.js","components/Oversikt.js","assets/Beskjed.js","assets/Oppgave.js","components/Funksjonalitet.js","components/Tidslinje.js","components/Teknisk.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FlatLayout","styled","div","Style","props","backgroundColor","Layout","children","flat","Innhold","Ingress","Introduksjon","Problemer","className","Oversikt","src","alt","Beskjed","width","height","viewBox","version","xmlns","xmlnsXlink","stroke","strokeWidth","fill","fillRule","transform","cx","cy","r","d","id","Oppgave","Box","Funksjonalitet","Tidslinje","Diagram","img","Teknisk","diagram","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e380ec7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Diagram.9fd7ba2c.png\";","import React from 'react';\nimport styled from \"styled-components\";\n\n\nexport const FlatLayout = styled.div`\n  background-color: #E9E7E7;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Style = styled.div`\n    background-color: ${props => props.backgroundColor};\n    position: relative;\n    color: black;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Layout = ({ backgroundColor, children }) => (\n    <Style backgroundColor={backgroundColor}>\n        {children}\n    </Style>\n);\n\nexport default Layout;\n","import styled from \"styled-components\";\nimport React from \"react\";\n\nconst Style = styled.div`\n    margin-top: 8rem;\n    margin-bottom: 8rem;\n    margin-left: ${props => props.flat ? '0rem' : '8rem'};\n    margin-right: ${props => props.flat ? '0rem' : '8rem'};\n`;\n\nconst Innhold = ({ flat, children }) => (\n    <Style flat={flat}>\n        {children}\n    </Style>\n);\n\nexport default Innhold;\n","import styled from \"styled-components\";\n\nconst Ingress = styled.div`\n    max-width: 800px;\n`;\n\nexport default Ingress;\n","import React from 'react';\nimport { Normaltekst, Sidetittel } from \"nav-frontend-typografi\";\nimport Layout from \"./styled/Layout\";\nimport Innhold from \"./styled/Innhold\";\nimport Ingress from \"./styled/Ingress\";\n\nconst Introduksjon = () => {\n    return (\n        <Layout backgroundColor=\"#C6C2BF\">\n            <Innhold>\n                <Sidetittel>\n                    Ditt NAV: <br/>Helhet i innloggede tjenester på nav.no\n                </Sidetittel>\n                <br/>\n                <Ingress>\n                    <Normaltekst>\n                        \"Ditt NAV skal binde sammen alle de gode tjenestene som andre team lager for brukerne våre.\n                        Brukerne har ikke noe forhold til hvordan NAV er organisert eller hvordan tjenestene er inndelt\n                        - de vil bare ha hjelp og støtte i sin unike situasjon. På Ditt NAV skal brukerne få et\n                        overblikk over sitt forhold til NAV, og bli trygge på at NAV kan hjelpe dem videre i livet.\"\n                    </Normaltekst>\n                    <Normaltekst>\n                        <i>- Team Personbruker</i>\n                    </Normaltekst>\n                </Ingress>\n            </Innhold>\n        </Layout>\n    )\n};\n\nexport default Introduksjon;\n","import React from 'react';\nimport { Normaltekst, Undertittel } from \"nav-frontend-typografi\";\nimport Layout from \"./styled/Layout\";\nimport Ingress from \"./styled/Ingress\";\nimport Innhold from \"./styled/Innhold\";\n\nconst Problemer = () => {\n    return (\n        <Layout backgroundColor=\"#E9E7E7\">\n            <Innhold>\n                <div className=\"innhold\">\n                    <Undertittel>\n                        Hvilke problemer skal vi løse?\n                    </Undertittel>\n                    <br/>\n                    <Ingress>\n                        <Normaltekst>\n                            Brukerne sliter med å finne frem i de innloggede løsningene på nav.no. Informasjonen er\n                            spredt og brukerne leter etter alt på alle steder. De føler utrygghet -\"Det sorte hullet\"\n                            blir brukt som betegnelse på opplevelsen brukerne har av å sende inn en søknad. Har Nav\n                            mottat søknaden min? Har jeg gjort alt riktig? Mangler det noe? Når skal nav begynne å se\n                            på saken min? Hvor lenge skal den være \"under behendling\" og hva er det neste som skal skje?\n                            <b><i>Kommer alt til å ordne seg?</i></b>\n                        </Normaltekst>\n                        <Normaltekst>\n                            Dittnav blir en flaskehals slik det har vært satt opp, med ekstremt mange koblinger og\n                            avhengigheter ut til andre systemer og løsninger. Hver gang noe nytt skal \"kobles på\" Ditt\n                            NAV kreves det utvikling fra Team Personbruker, og det kan ta tid før verdifull informasjon\n                            til brukerne som blir generert av andre team når frem til Ditt NAV.\n                        </Normaltekst>\n                    </Ingress>\n                </div>\n            </Innhold>\n        </Layout>\n    )\n};\n\nexport default Problemer;\n","import React from 'react';\nimport { Systemtittel } from \"nav-frontend-typografi\";\nimport Layout from \"./styled/Layout\";\nimport Innhold from \"./styled/Innhold\";\n\nconst Oversikt = () => {\n    return (\n        <Layout backgroundColor=\"#C6C2BF\">\n            <Innhold>\n                <Systemtittel>\n                    Brukernotifikasjoner og statusopdateringer:<br />\n                    Oppgaver, beskjeder og status i søknad/sak til brukerne gjennom Ditt Nav\n                </Systemtittel>\n                <br/>\n                <img src=\"\" alt=\"\"/>\n            </Innhold>\n        </Layout>\n    )\n};\n\nexport default Oversikt;\n","import React from 'react';\n\nconst Beskjed = () => (\n  <svg width=\"88px\" height=\"88px\" viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n      <g transform=\"translate(-382.000000, -303.000000)\">\n        <g transform=\"translate(382.000000, 303.000000)\">\n          <circle fill=\"#C2EAF7\" cx=\"24\" cy=\"24\" r=\"24\" />\n          <path d=\"M23.5,12 C29.8410001,12 35,17.159 35,23.5 C35,29.8410001 29.8410001,35 23.5,35 C17.159,35 12,29.8410001 12,23.5 C12,17.159 17.159,12 23.5,12 Z M23.5,13 C17.71,13 13,17.71 13,23.5 C13,29.2900001 17.71,34 23.5,34 C29.2900001,34 34,29.2900001 34,23.5 C34,17.71 29.2900001,13 23.5,13 Z M21.5,21 L23.5,21 C23.7453334,21 23.9495803,21.1769877 23.9919397,21.4101619 L24,21.5 L24,30 L26.5,30 C26.7760001,30 27,30.2240001 27,30.5 C27,30.7453334 26.8230124,30.9495803 26.5898382,30.9919397 L26.5,31 L20.5,31 C20.224,31 20,30.7760001 20,30.5 C20,30.2546667 20.1769877,30.0504198 20.4101619,30.0080604 L20.5,30 L23,30 L23,22 L21.5,22 C21.224,22 21,21.776 21,21.5 C21,21.2546667 21.1769877,21.0504198 21.4101619,21.0080604 L21.5,21 L23.5,21 Z M23,16.5 C23.5522848,16.5 24,16.9477153 24,17.5 C24,18.0522848 23.5522848,18.5 23,18.5 C22.4477153,18.5 22,18.0522848 22,17.5 C22,16.9477153 22.4477153,16.5 23,16.5 Z\" id=\"Combined-Shape\" fill=\"#3E3832\" />\n        </g>\n      </g>\n    </g>\n  </svg>\n);\n\nexport default Beskjed;\n","import React from 'react';\n\nconst Oppgave = () => (\n  <svg width=\"88px\" height=\"88px\" viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n      <g transform=\"translate(-382.000000, -429.000000)\">\n        <g transform=\"translate(382.000000, 429.000000)\">\n          <circle fill=\"#FFBD66\" cx=\"24\" cy=\"24\" r=\"24\" />\n          <path d=\"M35.5,12 C35.7760001,12 36,12.224 36,12.5 L36,35.5 C36,35.7760001 35.7760001,36 35.5,36 L12.5,36 C12.224,36 12,35.7760001 12,35.5 L12,12.5 C12,12.224 12.224,12 12.5,12 L35.5,12 Z M35,13 L13,13 L13,35 L35,35 L35,13 Z M22.853,25.1470001 C23.048,25.3420001 23.048,25.6590001 22.853,25.8540001 L17.853,30.8540001 C17.756,30.9510001 17.628,31.0000001 17.5,31.0000001 C17.372,31.0000001 17.244,30.9510001 17.146,30.8540001 L15.146,28.8540001 C14.951,28.6590001 14.951,28.3420001 15.146,28.1470001 C15.341,27.9520001 15.658,27.9520001 15.853,28.1470001 L17.5,29.7930001 L22.146,25.1470001 C22.341,24.9520001 22.658,24.9520001 22.853,25.1470001 Z M32.5,29.0000001 C32.7760001,29.0000001 33,29.2240001 33,29.5000001 C33,29.7760001 32.7760001,30.0000001 32.5,30.0000001 L24.5,30.0000001 C24.2240001,30.0000001 24,29.7760001 24,29.5000001 C24,29.2240001 24.2240001,29.0000001 24.5,29.0000001 L32.5,29.0000001 Z M22.853,16.147 C23.048,16.342 23.048,16.659 22.853,16.854 L17.853,21.854 C17.756,21.951 17.628,22 17.5,22 C17.372,22 17.244,21.951 17.146,21.854 L15.146,19.854 C14.951,19.659 14.951,19.342 15.146,19.147 C15.341,18.952 15.658,18.952 15.853,19.147 L17.5,20.793 L22.146,16.147 C22.341,15.952 22.658,15.952 22.853,16.147 Z M32.5,20 C32.7760001,20 33,20.224 33,20.5 C33,20.776 32.7760001,21 32.5,21 L24.5,21 C24.2240001,21 24,20.776 24,20.5 C24,20.224 24.2240001,20 24.5,20 L32.5,20 Z\" id=\"Combined-Shape\" fill=\"#3E3832\" />\n        </g>\n      </g>\n    </g>\n  </svg>\n);\n\nexport default Oppgave;\n","import React from 'react';\nimport {Normaltekst, Sidetittel} from \"nav-frontend-typografi\";\nimport Innhold from \"./styled/Innhold\";\nimport { FlatLayout } from \"./styled/Layout\";\nimport styled from \"styled-components\";\nimport Beskjed from \"../assets/Beskjed\";\nimport Oppgave from \"../assets/Oppgave\";\n\nconst Box = styled.div`\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n`;\n\nconst Funksjonalitet = () => {\n    return (\n        <FlatLayout>\n            <Innhold flat>\n                <Sidetittel>\n                    Sånn funker det:\n                </Sidetittel>\n                <br/>\n                <Box>\n                    <div>\n                        <Beskjed/>\n                        <Normaltekst>\n                            <b>Oppgaver...</b> <br />\n                            Forklaring/hensikt <br />\n                            Kafka: brukernotifikasjon + done <br /><br />\n                            Status: klar til bruk\n                        </Normaltekst>\n                    </div>\n                    <div>\n                        <Oppgave/>\n                        <Normaltekst>\n                            <b>Beskjeder...</b> <br />\n                            Forklaring/hensikt <br />\n                            Kafka: brukernotifikasjon + done <br /><br />\n                            Status: klar til bruk\n                        </Normaltekst>\n                    </div>\n                    <div>\n                        <Oppgave />\n                        <Normaltekst>\n                            <b>Statusoppdateringer...</b> <br />\n                            Forklaring/hensikt <br />\n                            Kafka: brukernotifikasjon + done <br /><br />\n                            Status: under utvikling\n                        </Normaltekst>\n                    </div>\n                </Box>\n            </Innhold>\n        </FlatLayout>\n    )\n};\n\nexport default Funksjonalitet;\n","import React from 'react';\nimport {Normaltekst, Systemtittel} from \"nav-frontend-typografi\";\nimport Layout from \"./styled/Layout\";\nimport Innhold from \"./styled/Innhold\";\nimport Ingress from \"./styled/Ingress\";\n\nconst Tidslinje = () => {\n    return (\n        <Layout backgroundColor=\"#C6C2BF\">\n            <Innhold>\n                <Systemtittel>\n                    Tidslinje: <br />\n                    Komponent for å vise tidligere og kommende hendelser i en sak\n                </Systemtittel>\n                <br/>\n                <Ingress>\n                    <Normaltekst>\n                        Vi lager en react-komponent som basert på hendelsene (oppgaver, beskjeder og\n                        statusoppdateringer)\n                        viser bruker hva som har skjedd i saken og hva som er neste steg. Stegene vil være generiske,\n                        men\n                        tidslinjen kan tilpasses av hvert team som lager innsyn i sak for tjenestene våre.\n                    </Normaltekst>\n                    <img src=\"\" alt=\"\" />\n                </Ingress>\n            </Innhold>\n        </Layout>\n    )\n};\n\nexport default Tidslinje;\n","import React from 'react';\nimport styled from \"styled-components\";\nimport { Normaltekst, Systemtittel } from \"nav-frontend-typografi\";\nimport Layout from \"./styled/Layout\";\nimport Innhold from \"./styled/Innhold\";\nimport diagram from \"../assets/Diagram.png\"\nimport Ingress from \"./styled/Ingress\";\n\nconst Diagram = styled.img`\n  width: 100%;\n  height: auto;\n  border-radius: 10px;\n  margin-top: 6rem;\n`;\n\nconst Teknisk = () => {\n    return (\n        <Layout backgroundColor=\"#E9E7E7\">\n            <Innhold>\n                <Systemtittel>\n                    Teknisk dokumentasjon\n                </Systemtittel>\n                <br/>\n                <Ingress>\n                    <Normaltekst>\n                        Vi lager en react-komponent som basert på hendelsene (oppgaver, beskjeder og\n                        statusoppdateringer) viser bruker hva som har skjedd i saken og hva som er neste steg.\n                        Stegene vil være generiske, men tidslinjen kan tilpasses av hvert team som lager innsyn i sak\n                        for tjenestene våre.\n                    </Normaltekst>\n                    <Diagram src={diagram} alt=\"Diagram av løsningen\"/>\n                </Ingress>\n            </Innhold>\n        </Layout>\n    )\n};\n\nexport default Teknisk;\n","import React from 'react';\nimport Introduksjon from './components/Introduksjon';\nimport Problemer from \"./components/Problemer\";\nimport Oversikt from \"./components/Oversikt\";\nimport Funksjonalitet from \"./components/Funksjonalitet\";\nimport Tidslinje from \"./components/Tidslinje\";\nimport Teknisk from \"./components/Teknisk\";\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Introduksjon />\n      <Problemer />\n      <Oversikt />\n      <Funksjonalitet />\n      <Tidslinje />\n      <Teknisk />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}